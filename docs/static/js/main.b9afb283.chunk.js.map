{"version":3,"sources":["function.js","page/UniqColor.js","page/RandomColors.js","page/Error.js","App.js","serviceWorker.js","index.js"],"names":["className","args","join","UniqColor","darkState","classes","makeStyles","theme","title","color","textShadow","useStyles","useState","uniqRandom","text","format","textContrast","typeObj","state","setState","useEffect","uniqColor","prev","style","marginBottom","Autocomplete","freeSolo","multiple","id","options","getOptionLabel","option","defaultValue","filterSelectedOptions","renderTags","value","getTagProps","map","index","Chip","label","size","backgroundColor","deleteIcon","HighlightOff","renderInput","params","TextField","variant","placeholder","fullWidth","onChange","event","newValue","FormControl","formControl","InputLabel","Select","labelId","target","formatList","el","MenuItem","FormControlLabel","control","Checkbox","checked","name","key","hue","shade","padding","borderRadius","textAlign","float","colorView","RandomColors","number","colors","hues","excludeHues","shades","excludeShades","numberColorGroup","repeat","refresh","randomColor","combination","parseInt","huesList","colorsList","getContrastYIQ","shadesList","IconButton","aria-label","onClick","Refresh","cursor","error","numberGroup","Accordion","AccordionSummary","expandIcon","ExpandMore","aria-controls","Typography","heading","length","AccordionDetails","flex","Error","paragraph","drawerWidth","App","props","wind","container","undefined","document","body","prefersDark","window","matchMedia","matches","localDark","localStorage","getItem","isDark","pathname","useLocation","replace","React","mobileOpen","repo","root","display","drawer","breakpoints","up","width","flexShrink","appBar","marginLeft","menuButton","marginRight","spacing","grey","blue","toolbar","mixins","drawerPaper","content","flexGrow","palletType","mainPrimaryColor","mainSecondaryColor","darkTheme","createMuiTheme","palette","type","primary","main","secondary","useTheme","handleDrawerToggle","handleThemeChange","useCallback","setItem","routeObj","path","obj","Promise","all","fetch","then","resUser","resGroup","json","dataUser","dataGroup","catch","e","console","List","icon","badge","to","ListItem","button","page","ListItemIcon","ListItemText","ThemeProvider","CssBaseline","AppBar","position","boxShadow","Toolbar","edge","Menu","Hidden","smUp","implementation","Drawer","anchor","direction","open","onClose","paper","ModalProps","keepMounted","xsDown","exact","component","Boolean","location","hostname","match","ReactDOM","render","basename","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.b9afb283.chunk.js","sourcesContent":["const className = (...args) => args.join(' ');\nexport { className };\n","import React, { useState, useEffect } from \"react\";\nimport {\n    TextField,\n    makeStyles,\n    Chip,\n    FormControlLabel,\n    Checkbox,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem\n} from \"@material-ui/core\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport { className } from \"../function\";\nimport \"../styles/main.css\";\n\nimport {\n    uniqColor,\n    getContrastYIQ,\n    formatList\n} from \"random-colors-palette\";\nimport { HighlightOff } from \"@material-ui/icons\";\n\nexport default function UniqColor({ darkState }) {\n    const useStyles = makeStyles((theme) => ({\n        title: {\n            color: darkState ? \"#ffffff\" : \"#343a40\",\n            textShadow: `3px 3px 2px ${\n                darkState ? \"rgba(0, 0, 0, 1)\" : \"rgba(150, 150, 150, 1)\"\n            }`\n        }\n    }));\n    const classes = useStyles();\n    const [state, setState] = useState({\n        uniqRandom: [],\n        text: [\"random\", \"colors\", \"palette\"],\n        format: \"hex\",\n        textContrast: true,\n        typeObj: true\n    });\n    const { uniqRandom, text, textContrast, format, typeObj } = state;\n\n    useEffect(() => {\n        const uniqRandom = uniqColor({\n            text,\n            format,\n            textContrast,\n            typeObj\n        });\n\n        setState((prev) => ({\n            ...prev,\n            uniqRandom\n        }));\n    }, [text, format, textContrast, typeObj]);\n\n    const colorView = ({\n                           hue = \"\",\n                           shade = \"\",\n                           value,\n                           textContrast = \"#000\",\n                           key\n                       }) => (\n        <div\n            key={`${hue}-${shade}-${key}`}\n            style={{\n                backgroundColor: value,\n                padding: 8,\n                borderRadius: 4,\n                marginBottom: 4,\n                color: textContrast\n            }}\n        >\n            {hue}\n            <div style={{ textAlign: \"left\" }}>\n                {shade}{\" \"}\n                <span\n                    style={{\n                        ...(hue && { float: \"right\" })\n                    }}\n                >\n          {value}\n        </span>\n            </div>\n        </div>\n    );\n\n    return (\n        <>\n            <h1 className={className(classes.title, \"text-6xl font-bold hp\")}>\n                uniq\n                <span className=\"text-primary\">Color</span>\n            </h1>\n            <div\n                style={{\n                    marginBottom: 12\n                }}\n            >\n                <Autocomplete\n                    freeSolo\n                    multiple\n                    id=\"text-exclude-outlined\"\n                    options={[]}\n                    getOptionLabel={(option) => option}\n                    defaultValue={text}\n                    filterSelectedOptions\n                    renderTags={(value, getTagProps) =>\n                        value.map((option, index) => (\n                            <Chip\n                                label={option}\n                                size=\"small\"\n                                {...getTagProps({ index })}\n                                style={{\n                                    backgroundColor: uniqRandom[index]?.value || uniqRandom[index],\n                                    color: uniqRandom[index]?.textContrast //|| getContrastYIQ(uniqRandom[index]),\n                                }}\n                                deleteIcon={\n                                    <HighlightOff\n                                        style={{\n                                            color: uniqRandom[index]?.textContrast\n                                        }}\n                                    />\n                                }\n                            />\n                        ))\n                    }\n                    renderInput={(params) => (\n                        <TextField\n                            {...params}\n                            variant=\"outlined\"\n                            label=\"Text\"\n                            placeholder=\"Text\"\n                            size=\"small\"\n                            fullWidth\n                        />\n                    )}\n                    onChange={(event, newValue) =>\n                        setState((prev) => ({\n                            ...prev,\n                            text: newValue\n                        }))\n                    }\n                />\n            </div>\n\n            <div\n                style={{\n                    marginBottom: 12\n                }}\n            >\n                <FormControl\n                    variant=\"outlined\"\n                    size=\"small\"\n                    fullWidth\n                    className={classes.formControl}\n                >\n                    <InputLabel id=\"demo-simple-select-outlined-label\">Format</InputLabel>\n                    <Select\n                        labelId=\"demo-simple-select-outlined-label\"\n                        id=\"demo-simple-select-outlined\"\n                        value={format}\n                        onChange={({ target: { value } }) =>\n                            setState((prev) => ({\n                                ...prev,\n                                format: value\n                            }))\n                        }\n                        label=\"Format\"\n                    >\n                        {formatList.map((el) => (\n                            <MenuItem key={el} value={el}>\n                                {el}\n                            </MenuItem>\n                        ))}\n                    </Select>\n                </FormControl>\n            </div>\n\n            {typeObj && (\n                <FormControlLabel\n                    control={\n                        <Checkbox\n                            checked={textContrast}\n                            onChange={({ target: { checked } }) =>\n                                setState((prev) => ({\n                                    ...prev,\n                                    textContrast: checked\n                                }))\n                            }\n                            name=\"textContrast\"\n                            color=\"primary\"\n                        />\n                    }\n                    label=\"Text Contrast\"\n                />\n            )}\n\n            <div\n                style={{\n                    marginBottom: 12\n                }}\n            >\n                <FormControl\n                    variant=\"outlined\"\n                    size=\"small\"\n                    fullWidth\n                    className={classes.formControl}\n                >\n                    <InputLabel id=\"demo-simple-select-outlined-label\">Format</InputLabel>\n                    <Select\n                        labelId=\"demo-simple-select-outlined-label\"\n                        id=\"demo-simple-select-outlined\"\n                        value={typeObj}\n                        onChange={({ target: { value } }) =>\n                            setState((prev) => ({\n                                ...prev,\n                                typeObj: value\n                            }))\n                        }\n                        label=\"Format\"\n                    >\n                        <MenuItem value={true}>Type object</MenuItem>\n                        <MenuItem value={false}>Type not object</MenuItem>\n                    </Select>\n                </FormControl>\n            </div>\n\n            <div\n                style={{\n                    marginBottom: 12\n                }}\n            >\n                {uniqRandom.map((el, key) => {\n                    const { hue, shade, value, textContrast } = el;\n                    return colorView({\n                        ...(hue && { hue, shade, value, textContrast }),\n                        ...(!hue && { value: el }),\n                        key\n                    });\n                })}\n            </div>\n        </>\n    );\n}\n","import React, { useState, useEffect } from \"react\";\nimport {\n    TextField,\n    FormControlLabel,\n    Checkbox,\n    IconButton,\n    Accordion,\n    AccordionSummary,\n    AccordionDetails,\n    Typography,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    makeStyles,\n    Chip\n} from \"@material-ui/core\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport { Refresh, ExpandMore, HighlightOff } from \"@material-ui/icons\";\nimport { className } from \"../function\";\nimport \"../styles/main.css\";\n\nimport {\n    randomColor,\n    getContrastYIQ,\n    colorsList,\n    huesList,\n    shadesList,\n    formatList,\n} from \"random-colors-palette\";\n\nexport default function RandomColors({ darkState }) {\n    const useStyles = makeStyles((theme) => ({\n        title: {\n            color: darkState ? \"#ffffff\" : \"#343a40\",\n            textShadow: `3px 3px 2px ${\n                darkState ? \"rgba(0, 0, 0, 1)\" : \"rgba(150, 150, 150, 1)\"\n            }`\n        }\n    }));\n    const classes = useStyles();\n    const [state, setState] = useState({\n        number: 12,\n        colors: [],\n        hues: [\"red\", \"blue\", \"lightBlue\", \"cyan\"],\n        excludeHues: [\"red\"],\n        shades: [\"100\", \"300\", \"400\", \"500\", \"700\"],\n        excludeShades: [\"400\"],\n        numberColorGroup: 1,\n        repeat: false,\n        format: \"hex\",\n        textContrast: true\n    });\n\n    const {\n        number,\n        colors,\n        hues,\n        shades,\n        excludeHues,\n        excludeShades,\n        numberColorGroup,\n        repeat,\n        format,\n        textContrast\n    } = state;\n\n    const refresh = () => {\n        const colors = randomColor({\n            number,\n            hues,\n            shades,\n            excludeHues,\n            excludeShades,\n            numberColorGroup,\n            repeat,\n            format,\n            textContrast\n        });\n\n        setState((prev) => ({\n            ...prev,\n            colors\n        }));\n    };\n\n    useEffect(() => {\n        refresh();\n    }, [\n        number,\n        hues,\n        shades,\n        excludeHues,\n        excludeShades,\n        numberColorGroup,\n        repeat,\n        textContrast,\n        format\n    ]);\n\n    const colorView = ({ hue, shade, value, textContrast, key }) => (\n        <div\n            key={`${hue}-${shade}-${key}`}\n            style={{\n                backgroundColor: value,\n                padding: 8,\n                borderRadius: 4,\n                marginBottom: 4,\n                color: textContrast\n            }}\n        >\n            {hue}\n            <div style={{ textAlign: \"left\" }}>\n                {shade} <span style={{ float: \"right\" }}>{value}</span>\n            </div>\n        </div>\n    );\n\n    return (\n        <>\n            <h1 className={className(classes.title, \"text-6xl font-bold hp\")}>\n                random\n                <span className=\"text-primary\">\n          Color({colors?.combination})\n        </span>\n            </h1>\n\n            <div\n                style={{\n                    marginBottom: 12\n                }}\n            >\n                <TextField\n                    id=\"number\"\n                    label=\"Number\"\n                    placeholder=\"Number\"\n                    variant=\"outlined\"\n                    onChange={({ target: { value } }) =>\n                        setState((prev) => ({\n                            ...prev,\n                            number: parseInt(value)\n                        }))\n                    }\n                    value={number || \"\"}\n                    size=\"small\"\n                    fullWidth\n                />\n            </div>\n\n            <div\n                style={{\n                    marginBottom: 12\n                }}\n            >\n                <Autocomplete\n                    multiple\n                    id=\"hues-outlined\"\n                    options={huesList}\n                    getOptionLabel={(option) => option}\n                    defaultValue={hues}\n                    filterSelectedOptions\n                    renderTags={(value, getTagProps) =>\n                        value.map((option, index) => (\n                            <Chip\n                                label={option}\n                                size=\"small\"\n                                {...getTagProps({ index })}\n                                style={{\n                                    backgroundColor: colorsList[option][500],\n                                    color: getContrastYIQ(colorsList[option][500])\n                                }}\n                                deleteIcon={\n                                    <HighlightOff\n                                        style={{\n                                            color: getContrastYIQ(colorsList[option][500])\n                                        }}\n                                    />\n                                }\n                            />\n                        ))\n                    }\n                    renderInput={(params) => (\n                        <TextField\n                            {...params}\n                            variant=\"outlined\"\n                            label=\"Hues\"\n                            placeholder=\"Hues\"\n                            size=\"small\"\n                            fullWidth\n                        />\n                    )}\n                    onChange={(event, newValue) =>\n                        setState((prev) => ({\n                            ...prev,\n                            hues: newValue\n                        }))\n                    }\n                />\n            </div>\n\n            <div\n                style={{\n                    marginBottom: 12\n                }}\n            >\n                <Autocomplete\n                    multiple\n                    id=\"hues-exclude-outlined\"\n                    options={huesList}\n                    getOptionLabel={(option) => option}\n                    defaultValue={excludeHues}\n                    filterSelectedOptions\n                    renderTags={(value, getTagProps) =>\n                        value.map((option, index) => (\n                            <Chip\n                                label={option}\n                                size=\"small\"\n                                {...getTagProps({ index })}\n                                style={{\n                                    backgroundColor: colorsList[option][500],\n                                    color: getContrastYIQ(colorsList[option][500])\n                                }}\n                                deleteIcon={\n                                    <HighlightOff\n                                        style={{\n                                            color: getContrastYIQ(colorsList[option][500])\n                                        }}\n                                    />\n                                }\n                            />\n                        ))\n                    }\n                    renderInput={(params) => (\n                        <TextField\n                            {...params}\n                            variant=\"outlined\"\n                            label=\"Exclude Hues\"\n                            placeholder=\"Exclude Hues\"\n                            size=\"small\"\n                            fullWidth\n                        />\n                    )}\n                    onChange={(event, newValue) =>\n                        setState((prev) => ({\n                            ...prev,\n                            excludeHues: newValue\n                        }))\n                    }\n                />\n            </div>\n\n            <div\n                style={{\n                    marginBottom: 12\n                }}\n            >\n                <Autocomplete\n                    multiple\n                    id=\"shades-outlined\"\n                    options={shadesList}\n                    getOptionLabel={(option) => option}\n                    defaultValue={shades}\n                    filterSelectedOptions\n                    renderTags={(value, getTagProps) =>\n                        value.map((option, index) => (\n                            <Chip\n                                label={option}\n                                size=\"small\"\n                                {...getTagProps({ index })}\n                                style={{\n                                    backgroundColor: colorsList[\"blue\"][option],\n                                    color: getContrastYIQ(colorsList[\"blue\"][option])\n                                }}\n                                deleteIcon={\n                                    <HighlightOff\n                                        style={{\n                                            color: getContrastYIQ(colorsList[\"blue\"][500])\n                                        }}\n                                    />\n                                }\n                            />\n                        ))\n                    }\n                    renderInput={(params) => (\n                        <TextField\n                            {...params}\n                            variant=\"outlined\"\n                            label=\"Shades\"\n                            placeholder=\"Shades\"\n                            size=\"small\"\n                            fullWidth\n                        />\n                    )}\n                    onChange={(event, newValue) =>\n                        setState((prev) => ({\n                            ...prev,\n                            shades: newValue\n                        }))\n                    }\n                />\n            </div>\n\n            <div\n                style={{\n                    marginBottom: 12\n                }}\n            >\n                <Autocomplete\n                    multiple\n                    id=\"shades-exclude-outlined\"\n                    options={shadesList}\n                    getOptionLabel={(option) => option}\n                    defaultValue={excludeShades}\n                    filterSelectedOptions\n                    renderTags={(value, getTagProps) =>\n                        value.map((option, index) => (\n                            <Chip\n                                label={option}\n                                size=\"small\"\n                                {...getTagProps({ index })}\n                                style={{\n                                    backgroundColor: colorsList[\"blue\"][option],\n                                    color: getContrastYIQ(colorsList[\"blue\"][option])\n                                }}\n                                deleteIcon={\n                                    <HighlightOff\n                                        style={{\n                                            color: getContrastYIQ(colorsList[\"blue\"][500])\n                                        }}\n                                    />\n                                }\n                            />\n                        ))\n                    }\n                    renderInput={(params) => (\n                        <TextField\n                            {...params}\n                            variant=\"outlined\"\n                            label=\"Exclude Shades\"\n                            placeholder=\"Exclude Shades\"\n                            size=\"small\"\n                            fullWidth\n                        />\n                    )}\n                    onChange={(event, newValue) =>\n                        setState((prev) => ({\n                            ...prev,\n                            excludeShades: newValue\n                        }))\n                    }\n                />\n            </div>\n\n            <div\n                style={{\n                    marginBottom: 12\n                }}\n            >\n                <TextField\n                    id=\"number-colors-group\"\n                    label=\"Number of colors for each group\"\n                    placeholder=\"Number of colors for each group\"\n                    variant=\"outlined\"\n                    onChange={({ target: { value } }) =>\n                        setState((prev) => ({\n                            ...prev,\n                            numberColorGroup: parseInt(value)\n                        }))\n                    }\n                    value={numberColorGroup || \"\"}\n                    size=\"small\"\n                    fullWidth\n                />\n            </div>\n\n            <div\n                style={{\n                    marginBottom: 12\n                }}\n            >\n                <FormControl\n                    variant=\"outlined\"\n                    size=\"small\"\n                    fullWidth\n                    className={classes.formControl}\n                >\n                    <InputLabel id=\"demo-simple-select-outlined-label\">Format</InputLabel>\n                    <Select\n                        labelId=\"demo-simple-select-outlined-label\"\n                        id=\"demo-simple-select-outlined\"\n                        value={format}\n                        onChange={({ target: { value } }) =>\n                            setState((prev) => ({\n                                ...prev,\n                                format: value\n                            }))\n                        }\n                        label=\"Format\"\n                    >\n                        {formatList.map((el) => (\n                            <MenuItem key={el} value={el}>\n                                {el}\n                            </MenuItem>\n                        ))}\n                    </Select>\n                </FormControl>\n            </div>\n\n            <FormControlLabel\n                control={\n                    <Checkbox\n                        checked={repeat}\n                        onChange={({ target: { checked } }) =>\n                            setState((prev) => ({\n                                ...prev,\n                                repeat: checked\n                            }))\n                        }\n                        name=\"repeat\"\n                        color=\"primary\"\n                    />\n                }\n                label=\"Repeat\"\n            />\n\n            <FormControlLabel\n                control={\n                    <Checkbox\n                        checked={textContrast}\n                        onChange={({ target: { checked } }) =>\n                            setState((prev) => ({\n                                ...prev,\n                                textContrast: checked\n                            }))\n                        }\n                        name=\"textContrast\"\n                        color=\"primary\"\n                    />\n                }\n                label=\"Text Contrast\"\n            />\n\n            <IconButton aria-label=\"delete\" onClick={refresh}>\n                <Refresh style={{ cursor: \"pointer\" }} />\n            </IconButton>\n\n            {colors?.error && (\n                <div\n                    style={{\n                        marginBottom: 12\n                    }}\n                >\n                    There is a problem, the number of possible combinations is{\" \"}\n                    {colors?.combination}\n                </div>\n            )}\n\n            {colors?.numberGroup === 1\n                ? colors?.color?.map(({ hue, shade, value, textContrast }, key) =>\n                    colorView({ hue, shade, value, textContrast, key })\n                )\n                : colors?.color?.map((el, key) => (\n                    <Accordion key={`group${key}`}>\n                        <AccordionSummary\n                            expandIcon={<ExpandMore />}\n                            aria-controls=\"panel1a-content\"\n                            id=\"panel1a-header\"\n                        >\n                            <Typography className={classes.heading}>\n                                Group: {key} ({el.length})\n                            </Typography>\n                        </AccordionSummary>\n                        <AccordionDetails>\n                            <div style={{ flex: 1 }}>\n                                {el.map(({ hue, shade, value, textContrast }, key) =>\n                                    colorView({ hue, shade, value, textContrast, key })\n                                )}\n                            </div>\n                        </AccordionDetails>\n                    </Accordion>\n                ))}\n        </>\n    );\n}\n","import React from \"react\";\nimport { Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { className } from \"../function\";\nimport \"../styles/main.css\";\n\nexport default function Error({ darkState }) {\n    const useStyles = makeStyles((theme) => ({\n        title: {\n            color: darkState ? \"#ffffff\" : \"#343a40\",\n            textShadow: `3px 3px 2px ${\n                darkState ? \"rgba(0, 0, 0, 1)\" : \"rgba(150, 150, 150, 1)\"\n            }`\n        }\n    }));\n    const classes = useStyles();\n    return (\n        <div className=\"text-center\">\n            <h1 className={className(classes.title, \"text-6xl font-bold hp\")}>404</h1>\n            <Typography paragraph variant=\"h5\" color=\"textSecondary\">\n                We are sorry but we could not find the page you are looking.\n            </Typography>\n        </div>\n    );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Switch, Route, Link, useLocation } from \"react-router-dom\";\nimport {\n  AppBar,\n  CssBaseline,\n  Drawer,\n  Hidden,\n  IconButton,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Toolbar,\n  Chip\n} from \"@material-ui/core\";\nimport {\n  Info,\n  Menu,\n  Work\n} from \"@material-ui/icons\";\nimport {\n  makeStyles,\n  useTheme,\n  createMuiTheme,\n  ThemeProvider\n} from \"@material-ui/core/styles\";\nimport { blue, grey } from \"@material-ui/core/colors\";\nimport DarkModeToggle from \"react-dark-mode-toggle\";\nimport { UniqRandom, RandomColors, Error } from \"./page\";\nimport \"./styles/main.css\";\nimport \"./App.css\";\n\nconst drawerWidth = 240;\n\nfunction App(props) {\n  const { wind } = props;\n  const container = wind !== undefined ? () => wind().document.body : undefined;\n  const prefersDark = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n  const localDark = localStorage.getItem(\"dark\");\n  const isDark = localDark === null ? prefersDark : localDark === \"true\";\n\n  let location = useLocation();\n  let pathname = location.pathname.replace(\"/\", \"\");\n  if (pathname === \"\") pathname = \"about\";\n\n  const [state, setState] = React.useState({\n    mobileOpen: false,\n    darkState: isDark,\n    repo: []\n  });\n  const { mobileOpen, darkState, repo } = state;\n\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      display: \"flex\"\n    },\n    drawer: {\n      [theme.breakpoints.up(\"sm\")]: {\n        width: drawerWidth,\n        flexShrink: 0\n      }\n    },\n    appBar: {\n      [theme.breakpoints.up(\"sm\")]: {\n        width: `calc(100% - ${drawerWidth}px)`,\n        marginLeft: drawerWidth\n      }\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n      [theme.breakpoints.up(\"sm\")]: {\n        display: \"none\"\n      },\n      backgroundColor: darkState ? grey[900] : blue[500]\n    },\n    // necessary for content to be below app bar\n    toolbar: theme.mixins.toolbar,\n    drawerPaper: {\n      width: drawerWidth,\n      color: \"#ffffff\",\n      backgroundColor: darkState ? grey[900] : blue[500]\n    },\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing(3)\n    }\n  }));\n\n  const palletType = darkState ? \"dark\" : \"light\";\n  const mainPrimaryColor = darkState ? grey[900] : blue[500];\n  const mainSecondaryColor = darkState ? grey[800] : blue[300];\n  const darkTheme = createMuiTheme({\n    palette: {\n      type: palletType,\n      primary: {\n        main: mainPrimaryColor\n      },\n      secondary: {\n        main: mainSecondaryColor\n      }\n    }\n  });\n\n  const classes = useStyles();\n  const theme = useTheme();\n  const handleDrawerToggle = () =>\n      setState((prev) => ({ ...prev, mobileOpen: !mobileOpen }));\n  const changePage = (page) => setState((prev) => ({ ...prev, page }));\n  const handleThemeChange = React.useCallback(() => {\n    localStorage.setItem(\"dark\", !darkState);\n    setState((prev) => ({ ...prev, darkState: !prev.darkState }));\n  }, []);\n\n  const menu = [\n    { title: \"uniqColor\", path: \"uniqColor\"},\n    { title: \"randomColor\", path: \"randomColor\" }\n  ];\n\n  const routeObj = [\n    { path: \"/\", obj: <UniqRandom darkState={darkState} /> },\n    { path: \"uniqColor\", obj: <UniqRandom darkState={darkState} /> },\n    {\n      path: \"randomColor\",\n      obj: <RandomColors darkState={darkState} />\n    }\n  ];\n\n  React.useEffect(() => {\n    Promise.all([\n      fetch(\"https://api.github.com/users/gaetanozappi/repos?per_page=1000\"),\n      fetch(\n          \"https://api.github.com/users/TheCaponeBrothers/repos?per_page=1000\"\n      )\n    ])\n        .then(([resUser, resGroup]) =>\n            Promise.all([resUser.json(), resGroup.json()])\n        )\n        .then(([dataUser, dataGroup]) =>\n            setState((prev) => ({\n              ...prev,\n              repo: [...prev.repo, ...dataUser, ...dataGroup]\n            }))\n        )\n        .catch((e) => {\n          console.error(\"Error\", e);\n        });\n  }, []);\n\n  const drawer = (\n      <div className=\"mt-32\">\n        <div className={classes.toolbar} />\n        <List>\n          {menu.map(({ title, path, icon, badge }, index) => (\n              <Link to={`/${path}`} key={title}>\n                <ListItem button key={title} onClick={() => changePage(path)}>\n                  <ListItemIcon\n                      style={{ color: path === pathname ? \"#ffffff\" : \"#ffffff80\" }}\n                  >\n                    {icon}\n                  </ListItemIcon>\n                  <ListItemText\n                      primary={<span className=\"font-bold\">{title}</span>}\n                      style={{ color: path === pathname ? \"#ffffff\" : \"#ffffff80\" }}\n                  />\n                  {badge && (\n                      <Chip\n                          label={badge}\n                          size=\"small\"\n                          color=\"secondary\"\n                          className=\"font-bold\"\n                          style={{ color: \"#ffffff\" }}\n                      />\n                  )}\n                </ListItem>\n              </Link>\n          ))}\n        </List>\n      </div>\n  );\n\n  return (\n      <ThemeProvider theme={darkTheme}>\n        <div className={classes.root}>\n          <CssBaseline />\n          <AppBar\n              position=\"fixed\"\n              className={classes.appBar}\n              style={{\n                backgroundColor: darkState ? \"#303030\" : grey[50],\n                boxShadow: \"none\"\n              }}\n          >\n            <Toolbar className={\"shadow-none\"}>\n              <IconButton\n                  color=\"inherit\"\n                  aria-label=\"open drawer\"\n                  edge=\"start\"\n                  onClick={handleDrawerToggle}\n                  className={classes.menuButton}\n              >\n                <Menu />\n              </IconButton>\n              <div className=\"ml-auto text-right flex\">\n                <DarkModeToggle\n                    onChange={handleThemeChange}\n                    checked={darkState}\n                    size={60}\n                />\n              </div>\n            </Toolbar>\n          </AppBar>\n\n          <nav className={classes.drawer} aria-label=\"mailbox folders\">\n            {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n            <Hidden smUp implementation=\"css\">\n              <Drawer\n                  container={container}\n                  variant=\"temporary\"\n                  anchor={theme.direction === \"rtl\" ? \"right\" : \"left\"}\n                  open={mobileOpen}\n                  onClose={handleDrawerToggle}\n                  classes={{\n                    paper: classes.drawerPaper\n                  }}\n                  ModalProps={{\n                    keepMounted: true // Better open performance on mobile.\n                  }}\n              >\n                {drawer}\n              </Drawer>\n            </Hidden>\n            <Hidden xsDown implementation=\"css\">\n              <Drawer\n                  classes={{\n                    paper: classes.drawerPaper\n                  }}\n                  variant=\"permanent\"\n                  open\n              >\n                {drawer}\n              </Drawer>\n            </Hidden>\n          </nav>\n          <main className={classes.content}>\n            <div className={classes.toolbar} />\n            <Switch>\n              {routeObj.map(({ path, obj }, key) => (\n                  <Route exact path={`/${path}`} component={() => obj} key={key} />\n              ))}\n              <Route component={() => <Error darkState={darkState} />} />\n            </Switch>\n          </main>\n        </div>\n      </ThemeProvider>\n  );\n}\n\nApp.propTypes = {\n  /**\n   * Injected by the documentation to work in an iframe.\n   * You won't need it on your project.\n   */\n  wind: PropTypes.func\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {\n  HashRouter,\n  BrowserRouter as Router\n} from \"react-router-dom\";\n\nReactDOM.render(\n  <HashRouter basename='/'>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}